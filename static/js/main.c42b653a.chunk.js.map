{"version":3,"sources":["components/CounterControl/CounterControl.js","components/CounterOutput/CounterOutput.js","containers/Counter/Counter.js","App.js","registerServiceWorker.js","store/reducer.js","index.js"],"names":["counterControl","props","className","onClick","clicked","label","counterOutput","value","Counter","state","counter","counterChangedHandler","action","setState","prevState","this","ctr","Component","mapStateToProps","console","log","connect","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","initialState","reducer","store","createStore","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"uWAUeA,G,MANQ,SAACC,GAAD,OACnB,yBAAKC,UAAU,iBAAiBC,QAASF,EAAMG,SAC1CH,EAAMI,SCIAC,G,MANO,SAACL,GAAD,OAClB,yBAAKC,UAAU,iBAAf,oBACsBD,EAAMM,SCD1BC,E,4MACFC,MAAQ,CACJC,QAAS,G,EAGbC,sBAAwB,SAAEC,EAAQL,GAC9B,OAASK,GACL,IAAK,MACD,EAAKC,UAAU,SAAEC,GAAiB,MAAO,CAAEJ,QAASI,EAAUJ,QAAU,MACxE,MACJ,IAAK,MACD,EAAKG,UAAU,SAAEC,GAAiB,MAAO,CAAEJ,QAASI,EAAUJ,QAAU,MACxE,MACJ,IAAK,MACD,EAAKG,UAAU,SAAEC,GAAiB,MAAO,CAAEJ,QAASI,EAAUJ,QAAUH,MACxE,MACL,IAAK,MACA,EAAKM,UAAU,SAAEC,GAAiB,MAAO,CAAEJ,QAASI,EAAUJ,QAAUH,Q,uDAMzE,IAAD,OACN,OACI,6BACI,kBAAC,EAAD,CAAeA,MAAOQ,KAAKd,MAAMe,MACjC,kBAAC,EAAD,CAAgBX,MAAM,YAAYD,QAAS,kBAAM,EAAKO,sBAAuB,UAC7E,kBAAC,EAAD,CAAgBN,MAAM,YAAYD,QAAS,kBAAM,EAAKO,sBAAuB,UAC7E,kBAAC,EAAD,CAAgBN,MAAM,QAAQD,QAAS,kBAAM,EAAKO,sBAAuB,MAAO,MAChF,kBAAC,EAAD,CAAgBN,MAAM,aAAaD,QAAS,kBAAM,EAAKO,sBAAuB,MAAO,W,GA9B/EM,aAoChBC,EAAmB,SAAAT,GACrB,MAAO,CACHO,IAAKP,EAAMC,UAGnBS,QAAQC,IAAIF,EAAgBR,SAEbW,kBAAQH,EAARG,CAAyBb,GCjCzBc,G,6KARX,OACE,yBAAKpB,UAAU,OACd,kBAAC,EAAD,W,GAJWe,cCKZM,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5B,QACfsB,UAAUC,cAAcQ,WAK1BrB,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBqB,OAAM,SAAAC,GACLvB,QAAQuB,MAAM,4CAA6CA,M,WCtE3DC,EAAe,CACfjC,QAAS,GAOCkC,EAHC,WAAmC,IAAlCnC,EAAiC,uDAAzBkC,EACnB,OAAOlC,GCGRoC,EAAQC,YAAYF,GAG1BG,IAASC,OAAO,kBAAC,IAAD,CAAUH,MAAOA,GAAO,kBAAC,EAAD,OAAoBI,SAASC,eAAe,SFQrE,WACb,GAA6C,kBAAmBnB,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,mCAAwB3B,OAAOC,UAC3C2B,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMsB,mCAAN,sBAEN7B,EAwCX,SAAiCO,GAE/ByB,MAAMzB,GACHI,MAAK,SAAAsB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BT,OAAOC,SAASqC,eAKpBlC,EAAgBC,MAGnBW,OAAM,WACLtB,QAAQC,IACN,oEAzDA4C,CAAwBlC,GAHxBD,EAAgBC,OEvBxBmC,K","file":"static/js/main.c42b653a.chunk.js","sourcesContent":["import React from 'react';\n\nimport './CounterControl.css';\n\nconst counterControl = (props) => (\n    <div className=\"CounterControl\" onClick={props.clicked}>\n        {props.label}\n    </div>\n);\n\nexport default counterControl;","import React from 'react';\n\nimport './CounterOutput.css';\n\nconst counterOutput = (props) => (\n    <div className=\"CounterOutput\">\n        Current Counter: {props.value}\n    </div>\n);\n\nexport default counterOutput;","import React, { Component } from 'react';\nimport {connect } from \"react-redux\";\nimport CounterControl from '../../components/CounterControl/CounterControl';\nimport CounterOutput from '../../components/CounterOutput/CounterOutput';\n\nclass Counter extends Component {\n    state = {\n        counter: 0\n    }\n\n    counterChangedHandler = ( action, value ) => {\n        switch ( action ) {\n            case 'inc':\n                this.setState( ( prevState ) => { return { counter: prevState.counter + 1 } } )\n                break;\n            case 'dec':\n                this.setState( ( prevState ) => { return { counter: prevState.counter - 1 } } )\n                break;\n            case 'add':\n                this.setState( ( prevState ) => { return { counter: prevState.counter + value } } )\n                break;\n           case 'sub':\n                this.setState( ( prevState ) => { return { counter: prevState.counter - value } } )\n                break;\n        default:\n            }\n    }\n\n    render () {\n        return (\n            <div>\n                <CounterOutput value={this.props.ctr} />\n                <CounterControl label=\"Increment\" clicked={() => this.counterChangedHandler( 'inc' )} />\n                <CounterControl label=\"Decrement\" clicked={() => this.counterChangedHandler( 'dec' )}  />\n                <CounterControl label=\"Add 5\" clicked={() => this.counterChangedHandler( 'add', 5 )}  />\n                <CounterControl label=\"Subtract 5\" clicked={() => this.counterChangedHandler( 'sub', 5 )}  />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps =  state => {\n    return {\n        ctr: state.counter\n    };\n};\nconsole.log(mapStateToProps.counter)\n\nexport default connect(mapStateToProps)(Counter);","import React, { Component } from 'react';\n\nimport Counter from './containers/Counter/Counter';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <Counter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n      counter: 0\n }\n \n \n const reducer = (state = initialState, action) => {\n       return state;\n };\n export default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore} from \"redux\";\nimport reducer from \"./store/reducer\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(reducer);\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}